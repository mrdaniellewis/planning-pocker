<!doctype html>
<html lang="en-GB">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
<meta name="apple-mobile-web-app-capable" content="yes">
<title>Planning poker</title>
<style>
body {
  background: #555;
  margin: auto;
  position: relative;
  perspective: 1000vh;
  height: 100vh;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
}

* {
  -webkit-user-select: none;
  user-select: none;
}

button {
  -moz-appearance: none;
  -webkit-appearance: none;
  border-radius: 2vw;
  appearance: none;
  display: block;
  background: black;
  border: 1px solid yellow;
  color: yellow;
  cursor: pointer;
  margin: 0;
  font-size: 15vw;
  -webkit-text-size-adjust: 100%;
  transform-style: preserve-3d;
  transition-duration: .5s;
  transition-property: transform, width, height, font-size, font-weight, border-width, top, left, border-radius, color, background-color;
  position: absolute;
  will-change: transform;
  z-index: 0;
  outline: 0;
  padding: 0;
  line-height: 0;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
}

button:not(.active):focus {
  color: #fff;
  border-color: #fff;
}

@media (orientation: portrait) {
  button {
    width: 30vw;
    height: calc((100vh - 15vw) / 5);
    font-size: 15vw;
  }

  /* Vertical */
  button:nth-of-type(-n+3) {
    top: 2.5vw;
  }

  button:nth-of-type(n+4):nth-of-type(-n+6) {
    top: calc((100vh - 15vw) / 5 + 5vw);
  }

  button:nth-of-type(n+7):nth-of-type(-n+9) {
    top: calc(2 * (100vh - 15vw) / 5 + 7.5vw);
  }

  button:nth-of-type(n+10):nth-of-type(-n+12) {
    top: calc(3 * (100vh - 15vw) / 5 + 10vw);
  }

  button:nth-of-type(n+13):nth-of-type(-n+15) {
    top: calc(4 * (100vh - 15vw) / 5 + 12.5vw);
  }

  /* Horizontal */
  button:nth-of-type(3n+1) {
    left: 2.5vw;
  }

  button:nth-of-type(3n+2) {
    left: 35vw;
  }

  button:nth-of-type(3n+3) {
    left: 67.5vw;
  }
}

@media (orientation: landscape) {
  button {
    width: 17vw;
    height: calc((100vh - 10vw) / 3);
    font-size: 9vw;
  }

  /* Vertical */
  button:nth-of-type(-n+5) {
    top: 2.5vw;
  }

  button:nth-of-type(n+6):nth-of-type(-n+10) {
    top: calc((100vh - 10vw) / 3 + 5vw);
  }

  button:nth-of-type(n+11):nth-of-type(-n+15) {
    top: calc(2 * (100vh - 10vw) / 3 + 7.5vw);
  }

  /* Horizontal */
  button:nth-of-type(5n+1) {
    left: 2.5vw;
  }

  button:nth-of-type(5n+2) {
    left: 22vw;
  }

  button:nth-of-type(5n+3) {
    left: 41.5vw;
  }

  button:nth-of-type(5n+4) {
    left: 61vw;
  }

  button:nth-of-type(5n+5) {
    left: 80.5vw;
  }
}

/* Override double nth-of-type selector */
button.active.active {
  border-radius: 4vw;
  z-index: 2; /* closing cards are given a z-index of 1 */
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  font-size: 50vw;
  font-weight: bold;
  border-width: 2vw;
  /* The translate keeps the open card in front in Firefox.  In Chrome a z-index is needed */
  transform: translateZ(100vh) scaleX(.8) scaleY(.8);
  color: black;
  background: yellow;
  border-color: yellow;
  transition-property: transform, width, height, font-size, border-width, top, left, border-radius, color, background-color;
}

button.active.active.weight-normal {
  font-weight: normal;
}

.dim > button:not(.active) {
  opacity: .5;
}

</style>

<button type="button">0</button>
<button type="button">½</button>
<button type="button">1</button>
<button type="button">2</button>
<button type="button">3</button>
<button type="button">5</button>
<button type="button">8</button>
<button type="button">13</button>
<button type="button">20</button>
<button type="button">40</button>
<button type="button">90</button>
<button type="button">100</button>
<button type="button" aria-label="Unknown">?</button>
<button type="button" aria-label="Infinity">∞</button>
<button type="button" class="weight-normal">☕</button>

<script>
(function() {
  const rLanguage = /-.*$/;
  const languageMap = {
    '∞': {
      en: 'Infinity',
      ar: 'ما لا نهاية',
      cs: 'Nekonečno',
      cy: 'Infinity',
      da: 'Uendelighed',
      de: 'Unendlichkeit',
      el: 'Απειρο',
      es: 'infinito',
      fi: 'äärettömyys',
      fr: 'Infini',
      he: 'אינסוף',
      hi: 'अनन्तता',
      hu: 'végtelenség',
      id: 'Tak terbatas',
      it: 'Infinito',
      ja: '無限',
      ko: '무한대',
      nb: 'Uendelighet',
      nl: 'Oneindigheid',
      pl: 'Nieskończoność',
      pt: 'Infinidade',
      ro: 'Infinit',
      ru: 'бесконечность',
      sk: 'nekonečno',
      sv: 'Oändlighet',
      th: 'ความไม่มีที่สิ้นสุด',
      tr: 'Sonsuzluk',
      zh: '无穷',
    },
    '?': {
      en: 'Unknown',
      ar: 'غير معروف',
      cs: 'Neznámý',
      cy: 'anhysbys',
      da: 'Ukendt',
      de: 'Unbekannt',
      el: 'Αγνωστος',
      es: 'Desconocido',
      fi: 'Tuntematon',
      fr: 'Inconnu',
      he: 'לא ידוע',
      hi: 'अनजान',
      hu: 'Ismeretlen',
      id: 'tidak diketahui',
      it: 'Sconosciuto',
      ja: '未知の',
      ko: '알 수 없는',
      nb: 'Ukjent',
      nl: 'Onbekend',
      pl: 'Nieznany',
      pt: 'Desconhecido',
      ro: 'Necunoscut',
      ru: 'неизвестный',
      sk: 'nevedno',
      sv: 'haijulikani',
      th: 'ไม่ทราบ',
      tr: 'Bilinmiyor',
      zh: '未知',
    },
  };

  let clicker;

  class Clicker {
    constructor({ double, single }) {
      this.double = double;
      this.single = single;
    }

    remove() {
      clicker = null;
    }

    click() {
      if (this.timer) {
        clearTimeout(this.timer);
        this.remove();
        this.double();
        return;
      }

      this.timer = setTimeout(() => {
        this.remove();
        this.single();
      }, 200);
    }
  }

  function close() {
    Array.from(document.querySelectorAll('.active')).forEach(button => {
      button.addEventListener('transitionend', function handler() {
        button.style.zIndex = '';
        button.removeEventListener('transitionend', handler);
      });
      button.style.zIndex = 1;
      button.classList.remove('active');
    });
    document.body.classList.remove('dim');
  }

  function getLanguageText(button, lang) {
    const text = button.textContent;
    return languageMap[text] ? languageMap[text][lang.replace(rLanguage, '')] : text;
  }

  function stopSpeaking() {
    if (speechSynthesis.speaking) {
      speechSynthesis.cancel();
      return true;
    }
    return false;
  }

  function speak(button) {
    if (!window.speechSynthesis || speechSynthesis.getVoices().length === 0) {
      return;
    }

    if (stopSpeaking()) {
      return;
    }

    let defaultVoice = speechSynthesis.getVoices().filter(voice => voice.lang === document.documentElement.lang)[0];
    if (!defaultVoice) {
      const languagePrefix = document.documentElement.lang.replace(rLanguage);
      speechSynthesis.getVoices().filter(voice => voice.lang.startsWith(languagePrefix));
    }

    const used = [defaultVoice.lang.replace(rLanguage, '')];
    [defaultVoice || '']
      .concat(speechSynthesis.getVoices()
        .map(voice => [Math.random(), voice])
        .sort((a, b) => a[0] - b[0])
        .map(([_, voice]) => voice)
        .filter((voice) => {
          // Filter out voices in the same language
          if (used.find(prefix => voice.lang.startsWith(prefix))) {
            return false;
          }
          used.push(voice.lang.replace(rLanguage, ''));
          return true;
        })
        .filter(voice => getLanguageText(button, voice.lang))
      )
      .forEach((voice) => {
        const utterance = new SpeechSynthesisUtterance(getLanguageText(button, voice.lang));
        utterance.voice = voice;
        speechSynthesis.speak(utterance);
      });
  }

  function toggle(button) {
    stopSpeaking();
    if (button.classList.contains('active')) {
      close();
    } else {
      if (document.body.classList.contains('dim')) {
        close();
      }

      document.body.classList.add('dim');
      button.classList.add('active');
    }
  }

  document.addEventListener('mouseup', (e) => {
    e.preventDefault();

    if (e.button !== 0) {
      // Left click only
      return;
    }

    var button = e.target;
    if (button.nodeName.toLowerCase() !== 'button') {
      return;
    }

    if (!button.classList.contains('active')) {
      toggle(button);
      return;
    }

    clicker = clicker || new Clicker({
      double: () => speak(button),
      single: () => toggle(button),
    });
    clicker.click();
  });

  document.addEventListener('keyup', (e) => {
    if (e.key === "Escape" || e.keyCode === 27) {
      e.preventDefault();
      close();
    } else if (e.key === "r" || e.keyCode === 115) {
      speak(e.target);
    }
  });

  window.addEventListener('pagehide', () => stopSpeaking());
  window.addEventListener('unload', () => stopSpeaking());
}());
</script>
